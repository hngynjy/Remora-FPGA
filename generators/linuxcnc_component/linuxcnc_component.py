

def generate(project):
    print("generating linux-cnc component")

    remora_data = []
    remora_data.append("#ifndef REMORA_H")
    remora_data.append("#define REMORA_H")
    remora_data.append("")
    remora_data.append(f"#define JOINTS               {project['joints']}")
    remora_data.append(f"#define JOINT_ENABLE_BYTES   {project['joints_en_total'] // 8}")
    remora_data.append(f"#define VARIABLE_OUTPUTS     {project['vouts']}")
    remora_data.append(f"#define VARIABLE_INPUTS      {project['vins']}")
    remora_data.append(f"#define VARIABLES            {max(project['vins'], project['vouts'])}")
    remora_data.append(f"#define DIGITAL_OUTPUTS      {project['douts_total']}")
    remora_data.append(f"#define DIGITAL_OUTPUT_BYTES {project['douts_total'] // 8}")
    remora_data.append(f"#define DIGITAL_INPUTS       {project['dins_total']}")
    remora_data.append(f"#define DIGITAL_INPUT_BYTES  {project['dins_total'] // 8}")
    remora_data.append(f"#define SPIBUFSIZE           {project['data_size'] // 8}")
    remora_data.append("")
    remora_data.append("#define PRU_DATA            0x64617461")
    remora_data.append("#define PRU_READ            0x72656164")
    remora_data.append("#define PRU_WRITE           0x77726974")
    remora_data.append("#define PRU_ESTOP           0x65737470")
    remora_data.append("#define STEPBIT             22")
    remora_data.append("#define STEP_MASK           (1L<<STEPBIT)")
    remora_data.append("#define STEP_OFFSET         (1L<<(STEPBIT-1))")
    remora_data.append(f"#define PRU_BASEFREQ        120000")
    remora_data.append(f"#define PRU_OSC             {project['jdata']['clock']['speed']}")
    remora_data.append("")
    # TODO: move into plugin
    for num, joint in enumerate(project['jdata']["joints"]):
        if joint["type"] == "stepper":
            if joint.get("cl", False):
                enc_scale = joint.get("enc_scale", 1)
                remora_data.append(f"#define ENC_SCALE{num}          {enc_scale}")
    remora_data.append("")

    vouts_min = []
    vouts_max = []
    for vout in project['jdata']["vout"]:
        vouts_min.append(str(vout.get("min", 0)))
        vouts_max.append(str(vout.get("max", 10.0)))
    remora_data.append(f"float vout_min[VARIABLE_OUTPUTS] = {{{', '.join(vouts_min)}}};")
    remora_data.append(f"float vout_max[VARIABLE_OUTPUTS] = {{{', '.join(vouts_max)}}};")
    remora_data.append("")

    remora_data.append("typedef union {")
    remora_data.append("    struct {")
    remora_data.append("        uint8_t txBuffer[SPIBUFSIZE];")
    remora_data.append("    };")
    remora_data.append("    struct {")
    remora_data.append("        int32_t header;")
    remora_data.append("        int32_t jointFreqCmd[JOINTS];")
    remora_data.append("        int32_t setPoint[VARIABLE_OUTPUTS];")
    remora_data.append("        uint8_t jointEnable[JOINT_ENABLE_BYTES];")
    remora_data.append("        uint8_t outputs[DIGITAL_OUTPUT_BYTES];")
    remora_data.append("    };")
    remora_data.append("} txData_t;")
    remora_data.append("")
    remora_data.append("typedef union")
    remora_data.append("{")
    remora_data.append("    struct {")
    remora_data.append("        uint8_t rxBuffer[SPIBUFSIZE];")
    remora_data.append("    };")
    remora_data.append("    struct {")
    remora_data.append("        int32_t header;")
    remora_data.append("        int32_t jointFeedback[JOINTS];")
    remora_data.append("        int32_t processVariable[VARIABLE_INPUTS];")
    remora_data.append("        uint8_t inputs[DIGITAL_INPUT_BYTES];")
    remora_data.append("    };")
    remora_data.append("} rxData_t;")
    remora_data.append("")
    remora_data.append("#endif")
    remora_data.append("")
    open(f"{project['LINUXCNC_PATH']}/Components/remora.h", "w").write("\n".join(remora_data))
